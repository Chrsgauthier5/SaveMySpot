{"version":3,"sources":["components/Nav/index.js","components/Grid/index.js","components/Jumbotron/index.js","App.js","components/Form/index.js","pages/loginPage.js","pages/signUpPage.js","Router.js","registerServiceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","buttons","map","btn","Link","to","link","concat","color","style","display","name","Row","_ref2","fluid","children","Col","_ref3","size","split","join","Jumbotron","_ref","height","clear","paddingTop","textAlign","margin","App","components_Nav","id","components_Jumbotron","Component","Form","state","username","password","handleInputChange","event","_event$target","target","value","_this","setState","Object","defineProperty","handleFormSubmit","preventDefault","alert","this","onChange","type","placeholder","onClick","LoginPage","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","components_Form","signUpPage","Router","BrowserRouter","Switch","Route","exact","path","component","SignUp","Login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_Router","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8RAuBeA,SAlBH,SAAAC,GAAK,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAC/BJ,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEdJ,EAAMM,QAAQC,IAAI,SAAAC,GAAG,OAClBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAIF,EAAIG,MACdV,EAAAC,EAAAC,cAAA,UAAQC,UAAS,WAAAQ,OAAaJ,EAAIK,MAAjB,WAAiCC,MAAO,CAACC,QAASP,EAAIO,QAAU,UAAY,SAAUP,EAAIQ,cCLlH,SAASC,EAATC,GAAkC,IAAnBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,SAC3B,OAAOnB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,MAAAQ,OAAQO,EAAQ,SAAW,KAAOC,GAKlD,SAASC,EAATC,GAAiC,IAAlBC,EAAkBD,EAAlBC,KAAMH,EAAYE,EAAZF,SAC1B,OACEnB,EAAAC,EAAAC,cAAA,OACEC,UAAWmB,EACRC,MAAM,KACNjB,IAAI,SAAAgB,GAAI,MAAI,OAASA,IACrBE,KAAK,MAEPL,GCXQM,MAXf,SAAAC,GAAiC,IAAZP,EAAYO,EAAZP,SACnB,OACEnB,EAAAC,EAAAC,cAAA,OACEW,MAAO,CAAEc,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,SAAUC,OAAQ,IACnF5B,UAAU,aAETgB,ICmDQa,mLArBX,OAEEhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAAK5B,QAjCS,CACd,CACE6B,GAAI,EACJnB,KAAM,OACND,SAAS,EACTJ,KAAM,IACNE,MAAO,WAET,CACEsB,GAAI,EACJnB,KAAM,QACND,SAAS,EACTJ,KAAM,SACNE,MAAO,QAET,CACEsB,GAAI,EACJnB,KAAM,UACND,SAAS,EACTJ,KAAM,UACNE,MAAO,WAET,CACEsB,GAAI,EACJnB,KAAM,SACND,SAAS,EACTJ,KAAM,IACNE,MAAO,aAOTZ,EAAAC,EAAAC,cAACc,EAAD,KACEhB,EAAAC,EAAAC,cAACkB,EAAD,CAAKE,KAAK,QACVtB,EAAAC,EAAAC,cAACiC,EAAD,KACAnC,EAAAC,EAAAC,cAAA,wCAGAF,EAAAC,EAAAC,cAACkB,EAAD,CAAKE,KAAK,QACVtB,EAAAC,EAAAC,cAACiC,EAAD,KACAnC,EAAAC,EAAAC,cAAA,wCA5CUkC,qBCuDHC,6MAxDbC,MAAQ,CACNC,SAAU,GACVC,SAAU,MAGZC,kBAAoB,SAAAC,GAAS,IAAAC,EAEHD,EAAME,OAAtB7B,EAFmB4B,EAEnB5B,KAAM8B,EAFaF,EAEbE,MAGdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGjC,EAAO8B,OAIZK,iBAAmB,SAAAR,GAEjBA,EAAMS,iBAGNC,MAAK,SAAAzC,OAAUmC,EAAKR,MAAMC,WAC1BO,EAAKC,SAAS,CACZR,SAAU,GACVC,SAAU,8EAMZ,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACSmD,KAAKf,MAAMC,UAEpBvC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAA,SACE2C,MAAOQ,KAAKf,MAAMC,SAClBxB,KAAK,WACLuC,SAAUD,KAAKZ,kBACfc,KAAK,OACLC,YAAY,aAEdxD,EAAAC,EAAAC,cAAA,SACE2C,MAAOQ,KAAKf,MAAME,SAClBzB,KAAK,WACLuC,SAAUD,KAAKZ,kBACfc,KAAK,WACLC,YAAY,QAEdxD,EAAAC,EAAAC,cAAA,UAAQuD,QAASJ,KAAKH,kBAAtB,mBAnDSd,aC2CJsB,EA1Cf,SAAAC,GAAA,SAAAD,IAAA,OAAAV,OAAAY,EAAA,EAAAZ,CAAAK,KAAAK,GAAAV,OAAAa,EAAA,EAAAb,CAAAK,KAAAL,OAAAc,EAAA,EAAAd,CAAAU,GAAAK,MAAAV,KAAAW,YAAA,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAAU,EAAAC,GAAAX,OAAAkB,EAAA,EAAAlB,CAAAU,EAAA,EAAAS,IAAA,SAAAtB,MAAA,WAgCI,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,CAAK5B,QAhCO,CACd,CACE6B,GAAI,EACJnB,KAAM,OACND,SAAS,EACTJ,KAAM,IACNE,MAAO,WAET,CACEsB,GAAI,EACJnB,KAAM,QACND,SAAS,EACTJ,KAAM,SACNE,MAAO,QAET,CACEsB,GAAI,EACJnB,KAAM,UACND,SAAS,EACTJ,KAAM,UACNE,MAAO,WAET,CACEsB,GAAI,EACJnB,KAAM,SACND,SAAS,EACTJ,KAAM,IACNE,MAAO,aAIT,2BAGEZ,EAAAC,EAAAC,cAACkE,EAAD,WApCRV,EAAA,CAA+BtB,aC0ChBiC,EA1Cf,SAAAV,GAAA,SAAAU,IAAA,OAAArB,OAAAY,EAAA,EAAAZ,CAAAK,KAAAgB,GAAArB,OAAAa,EAAA,EAAAb,CAAAK,KAAAL,OAAAc,EAAA,EAAAd,CAAAqB,GAAAN,MAAAV,KAAAW,YAAA,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAAqB,EAAAV,GAAAX,OAAAkB,EAAA,EAAAlB,CAAAqB,EAAA,EAAAF,IAAA,SAAAtB,MAAA,WAgCI,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,CAAK5B,QAhCO,CACd,CACE6B,GAAI,EACJnB,KAAM,OACND,SAAS,EACTJ,KAAM,IACNE,MAAO,WAET,CACEsB,GAAI,EACJnB,KAAM,QACND,SAAS,EACTJ,KAAM,SACNE,MAAO,QAET,CACEsB,GAAI,EACJnB,KAAM,UACND,SAAS,EACTJ,KAAM,UACNE,MAAO,WAET,CACEsB,GAAI,EACJnB,KAAM,SACND,SAAS,EACTJ,KAAM,IACNE,MAAO,aAIT,2BAGEZ,EAAAC,EAAAC,cAACkE,EAAD,WApCRC,EAAA,CAAgCjC,aCYjBkC,EAVA,kBACbtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,KACEvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,KACExE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjChC,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWC,IACjC7E,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWE,OCDhCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvD,QACfiD,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAASC,OAAOtG,EAAAC,EAAAC,cAACqG,EAAD,MAAYC,SAASC,eAAe,SDcrC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA3E,OAAMgG,GAAN,sBAEN5B,EAwCX,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAqB,CAAwBjC,GAHxBD,EAAgBC,MC7BxBkC","file":"static/js/main.a068405c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n\nconst Nav = props => (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-success rounded\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"#\">\n            <h1>SaveMySpot</h1>\n          </a>\n          <div className=\"text-right\">\n\n          {props.buttons.map(btn => (\n              <Link to={btn.link} >\n              <button className={`btn btn-${btn.color} btn-lg`} style={{display: btn.display ? \"initial\" : \"none\"}}>{btn.name}</button>\n              </Link>\n          ))}\n          </div>\n        </div>\n      </nav>\n    );\n\nexport default Nav;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 500, clear: \"both\", paddingTop: 120, textAlign: \"center\", margin: 20}}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Nav from \"./components/Nav/index\";\nimport { Col, Row, Container } from \"./components/Grid/index\"; \nimport Jumbotron from \"./components/Jumbotron/index\";\n\nclass App extends Component {\n  render() {\n    const buttons = [\n      {\n        id: 1,\n        name: \"Home\",\n        display: false,\n        link: \"/\",\n        color: \"primary\"\n      },\n      {\n        id: 2,\n        name: \"Login\",\n        display: true,\n        link: \"/login\",\n        color: \"info\"\n      },\n      {\n        id: 3,\n        name: \"Sign Up\",\n        display: true,\n        link: \"/signUp\",\n        color: \"warning\"\n      },\n      {\n        id: 4,\n        name: \"Logout\",\n        display: false,\n        link: \"/\",\n        color: \"danger\"\n      }\n    ];\n    return (\n      \n      <div>\n      <Nav buttons={buttons}/>\n      <Row>\n        <Col size=\"md-6\">\n        <Jumbotron>\n        <h1> SaveMySpot Product Info</h1>\n        </Jumbotron>\n        </Col>\n        <Col size=\"md-6\">\n        <Jumbotron>\n        <h1>SaveMySpot Demo</h1>\n        </Jumbotron>\n        </Col>\n      </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\n\nclass Form extends Component {\n  // Setting the component's initial state\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n\n    // Alert the user their first and last name, clear `this.state.firstName` and `this.state.lastName`, clearing the inputs\n    alert(`Hello ${this.state.username}`);\n    this.setState({\n      username: \"\",\n      password: \"\"\n    });\n  };\n\n  render() {\n    // Notice how each input has a `value`, `name`, and `onChange` prop\n    return (\n      <div>\n        <p>\n          Hello {this.state.username} \n        </p>\n        <form className=\"form\">\n          <input\n            value={this.state.username}\n            name=\"username\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"username\"\n          />\n          <input\n            value={this.state.password}\n            name=\"password\"\n            onChange={this.handleInputChange}\n            type=\"password\"\n            placeholder=\"***\"\n          />\n          <button onClick={this.handleFormSubmit}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;","import React, { Component } from \"react\";\nimport Nav from \"../components/Nav/index\";\nimport Form from \"../components/Form/index\";\n\nexport class LoginPage extends Component {\n  render() {\n    const buttons = [\n      {\n        id: 1,\n        name: \"Home\",\n        display: true,\n        link: \"/\",\n        color: \"primary\"\n      },\n      {\n        id: 2,\n        name: \"Login\",\n        display: false,\n        link: \"/login\",\n        color: \"info\"\n      },\n      {\n        id: 3,\n        name: \"Sign Up\",\n        display: true,\n        link: \"/signUp\",\n        color: \"warning\"\n      },\n      {\n        id: 4,\n        name: \"Logout\",\n        display: false,\n        link: \"/\",\n        color: \"danger\"\n      }\n    ];\n    return (\n      <div>\n        <Nav buttons={buttons} />\n        Please Login to continue\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from \"react\";\nimport Nav from \"../components/Nav/index\";\nimport Form from \"../components/Form/index\";\n\nexport class signUpPage extends Component {\n  render() {\n    const buttons = [\n      {\n        id: 1,\n        name: \"Home\",\n        display: true,\n        link: \"/\",\n        color: \"primary\"\n      },\n      {\n        id: 2,\n        name: \"Login\",\n        display: true,\n        link: \"/login\",\n        color: \"info\"\n      },\n      {\n        id: 3,\n        name: \"Sign Up\",\n        display: false,\n        link: \"/signUp\",\n        color: \"warning\"\n      },\n      {\n        id: 4,\n        name: \"Logout\",\n        display: false,\n        link: \"/\",\n        color: \"danger\"\n      }\n    ];\n    return (\n      <div>\n        <Nav buttons={buttons} />\n        Please Login to continue\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default signUpPage;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport App from \"./App\";\nimport Login from \"./pages/loginPage\";\nimport SignUp from \"./pages/signUpPage\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/signUp\" component={SignUp} />\n      <Route path=\"/login\" component={Login} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Router from \"./Router\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}